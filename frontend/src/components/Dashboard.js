// L√≠nea 1: Importa React y los hooks necesarios para gestionar estado, efecto y contexto
import React, { useContext, useState, useEffect } from "react";

// L√≠nea 2: Importa useNavigate para redirigir al usuario tras cerrar sesi√≥n
import { useNavigate } from "react-router-dom";

// L√≠nea 4‚Äì8: Importa los componentes del sistema para categor√≠as, transacciones y reportes
import CategoryForm from "./CategoryForm";
import CategoryList from "./CategoryList";
import TransactionForm from "./TransactionForm";
import TransactionList from "./TransactionList";
import ReportChart from "./ReportChart";

// L√≠nea 10: Importa el contexto de autenticaci√≥n para acceder al usuario actual y funci√≥n de logout
import AuthContext from "../context/AuthContext";

// L√≠nea 12: Importa axios para realizar peticiones HTTP al backend
import axios from "axios";

// L√≠nea 14: Componente funcional principal del Dashboard
const Dashboard = () => {
  // L√≠nea 15: Extrae el usuario actual y la funci√≥n de logout desde el contexto de autenticaci√≥n
  const { user, logout } = useContext(AuthContext);

  // L√≠nea 17: Hook que permite redireccionar program√°ticamente entre rutas
  const navigate = useNavigate();

  // L√≠nea 19: Estado para refrescar la lista de categor√≠as al crear o eliminar una
  const [refreshCategories, setRefreshCategories] = useState(false);

  // L√≠nea 20: Estado para refrescar la lista de transacciones al crear o eliminar una
  const [refreshTransactions, setRefreshTransactions] = useState(false);

  // L√≠nea 22: Estado que almacena el total de gastos sumados desde el backend
  const [totalGastos, setTotalGastos] = useState(0);

  // L√≠nea 23: Estado que almacena el total de ingresos sumados desde el backend
  const [totalIngresos, setTotalIngresos] = useState(0);

  // L√≠nea 24: Estado que almacena el n√∫mero total de transacciones
  const [totalTransacciones, setTotalTransacciones] = useState(0);

  // L√≠nea 26: Estado que almacena la frase del d√≠a que se mostrar√° din√°micamente
  const [fraseDelDia, setFraseDelDia] = useState("");

  // L√≠nea 28: Array de frases aleatorias con consejos financieros y frases motivacionales
  const frases = [
    "üí° Consejo: Divide tus gastos en Necesidades, Deseos y Ahorros.",
    "üìò Frase: 'El dinero no crece en √°rboles, pero s√≠ con planificaci√≥n.'",
    "üí∏ Consejo: Controla tus peque√±os gastos, ¬°se acumulan r√°pido!",
    "üöÄ Frase: 'La libertad financiera comienza con un buen h√°bito.'",
    "üìä Consejo: Registra tus ingresos y gastos cada semana.",
    "üí¨ Frase: 'No se trata de cu√°nto ganas, sino de cu√°nto conservas.'",
    "üîê Consejo: Establece un fondo de emergencia, aunque sea peque√±o.",
    "üß† Frase: 'La inteligencia financiera supera la suerte.'",
    "üìÜ Consejo: Revisa tus transacciones al menos una vez por semana.",
    "üå± Frase: 'Peque√±os gastos controlados hoy, grandes logros ma√±ana.'",
  ];

  // L√≠nea 40: useEffect que se ejecuta al cargar el componente
  useEffect(() => {
    // L√≠nea 41: Selecciona un √≠ndice aleatorio del array de frases
    const indice = Math.floor(Math.random() * frases.length);

    // L√≠nea 42: Establece la frase seleccionada en el estado
    setFraseDelDia(frases[indice]);
  }, []); // Solo se ejecuta una vez al montar el componente

  // L√≠nea 45: Cambia el estado para forzar la recarga de categor√≠as
  const handleCategoryChange = () => setRefreshCategories((prev) => !prev);

  // L√≠nea 47: Cambia el estado para forzar la recarga de transacciones
  const handleTransactionChange = () => setRefreshTransactions((prev) => !prev);

  // L√≠nea 49: Cierra la sesi√≥n y redirige al usuario al login
  const handleLogout = () => {
    logout(); // Finaliza sesi√≥n desde el contexto
    navigate("/"); // Redirige al inicio de sesi√≥n
  };

  // L√≠nea 53: Hook que calcula los totales y n√∫mero de transacciones al cambiar transacciones
  useEffect(() => {
    // L√≠nea 54: Funci√≥n asincr√≥nica que obtiene los datos desde el backend
    const obtenerTotales = async () => {
      try {
        // L√≠nea 56: Realiza una petici√≥n para obtener todas las transacciones
        const response = await axios.get("/api/transacciones");
        const transacciones = response.data;

        // L√≠nea 59: Actualiza el estado con el n√∫mero total de transacciones
        setTotalTransacciones(transacciones.length);

        // L√≠nea 61: Suma todos los montos de tipo gasto
        const gastos = transacciones
          .filter((t) => t.categoria?.tipo === "gasto")
          .reduce((total, t) => total + parseFloat(t.monto), 0);

        // L√≠nea 65: Suma todos los montos de tipo ingreso
        const ingresos = transacciones
          .filter((t) => t.categoria?.tipo === "ingreso")
          .reduce((total, t) => total + parseFloat(t.monto), 0);

        // L√≠nea 69: Guarda los valores calculados en el estado
        setTotalGastos(gastos);
        setTotalIngresos(ingresos);
      } catch (error) {
        // L√≠nea 72: En caso de error, muestra mensaje y reinicia los valores
        console.error("Error al calcular totales:", error);
        setTotalGastos(0);
        setTotalIngresos(0);
        setTotalTransacciones(0);
      }
    };

    // L√≠nea 78: Ejecuta la funci√≥n para obtener los totales
    obtenerTotales();
  }, [refreshTransactions]); // L√≠nea 79: Se ejecuta cada vez que cambia el estado de refreshTransactions

  // L√≠nea 81: Devuelve el contenido visual del Dashboard
  return (
    <div className="container mt-4">
      {/* L√≠nea 83: L√≠nea con bot√≥n izquierdo, t√≠tulo centrado y espa√ßo derecho */}
      <div className="d-flex justify-content-between align-items-center mb-4">
        {/* L√≠nea 84: Bot√≥n de cerrar sesi√≥n en el extremo izquierdo */}
        <button className="btn btn-danger" onClick={handleLogout}>
          <i className="bi bi-box-arrow-left me-2"></i>Cerrar sesi√≥n
        </button>

        {/* L√≠nea 87: T√≠tulo centrado con √≠cono */}
        <h2 className="text-center flex-grow-1">
          <i className="bi bi-speedometer2 me-2"></i>Panel Principal
        </h2>

        {/* L√≠nea 90: Espacio vac√≠o derecho para balancear dise√±o */}
        <div style={{ width: "130px" }}></div>
      </div>

      {/* L√≠nea 93: Bienvenida con el rol del usuario */}
      <div className="alert alert-primary text-center">
        Bienvenido, rol: <strong>{user?.role}</strong> üéâ
      </div>

      {/* L√≠nea 97: Frase del d√≠a aleatoria y autom√°tica */}
      <div className="alert alert-info text-center shadow-sm fs-6">
        üöÄ {fraseDelDia}
      </div>

      {/* L√≠nea 101: Secci√≥n con dos columnas (categor√≠as y transacciones) */}
      <div className="row">
        {/* L√≠nea 103: Columna izquierda - Gesti√≥n de categor√≠as */}
        <div className="col-md-6">
          <div className="card shadow-sm mb-4">
            <div className="card-header bg-primary text-white">
              Gesti√≥n de Categor√≠as
            </div>
            <div className="card-body">
              <CategoryForm onCategoryCreated={handleCategoryChange} />
              <hr />
              <CategoryList
                refresh={refreshCategories}
                onCategoryDeleted={() => {
                  handleCategoryChange();
                  handleTransactionChange();
                }}
              />
            </div>
          </div>
        </div>

        {/* L√≠nea 120: Columna derecha - Gesti√≥n de transacciones */}
        <div className="col-md-6">
          <div className="card shadow-sm mb-4">
            <div className="card-header bg-success text-white">
              Gesti√≥n de Transacciones
            </div>
            <div className="card-body">
              <TransactionForm
                onTransactionCreated={handleTransactionChange}
                refreshCategories={refreshCategories}
              />
              <hr />
              <TransactionList
                refresh={refreshTransactions}
                onTransactionDeleted={handleTransactionChange}
              />
            </div>
          </div>
        </div>
      </div>

      {/* L√≠nea 137: Secci√≥n de reporte gr√°fico */}
      <div className="card shadow-sm mb-4">
        <div className="card-header bg-info text-white">
          Reporte de Transacciones
        </div>
        <div className="card-body">
          <ReportChart refresh={refreshTransactions} />
        </div>
      </div>
    </div>
  );
};

// L√≠nea 146: Exporta el componente para ser usado en las rutas
export default Dashboard;
